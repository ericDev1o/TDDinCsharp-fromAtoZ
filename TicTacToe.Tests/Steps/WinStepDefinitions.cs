// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TicTacToe.Tests.Steps
{   
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Win the TicTacToe game")]
    public partial class WinStepDefinitions
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        private static Game game;
        
#line 1 "Win.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo
            (
                new System.Globalization.CultureInfo("en-US"), 
                "Features", "Win the TicTacToe game", 
                null, 
                ProgrammingLanguage.CSharp, 
                featureTags
            );
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Given(@"an empty board")]
        public void GivenAnEmptyBoard()
        {
            game = new Game();
        }
        [When(@"I play zeroes on first column")]
        public void WhenIPlayZeroesOnFirstColumn()
        {
            game.MakeMove(0, State.Zero);
            game.MakeMove(3, State.Zero);
            game.MakeMove(6, State.Zero);
        }
        [Then(@"I should win the game")]
        public void ThenIShouldWinTheGame(WinState winState)
        {
            if(winState == WinState.Zeroes)
                Assert.That(game.CheckWin(), Is.EqualTo(WinState.Zeroes));
            else if(winState == WinState.Crosses)
                Assert.That(game.CheckWin(), Is.EqualTo(WinState.Crosses));
        }
        [When(@"I play zeroes on first column")]
        public void WhenIPlayCrossesOnFirstLine()
        {
            game.MakeMove(0, State.Cross);
            game.MakeMove(1, State.Cross);
            game.MakeMove(2, State.Cross);
        }
        [When(@"I play zeroes on first column")]
        public void WhenIPlayZeroesOnBackslashDiagonal()
        {
            game.MakeMove(0, State.Zero);
            game.MakeMove(4, State.Zero);
            game.MakeMove(8, State.Zero);
        }
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PlayVerticalZeroesLine")]
        [NUnit.Framework.CategoryAttribute("newtest")]
        public void PlayVerticalZeroesLine()
        {
            string[] tagsOfScenario = new string[] {
                    "newtest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayVerticalZeroesLine", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                GivenAnEmptyBoard();
                WhenIPlayZeroesOnFirstColumn();
                ThenIShouldWinTheGame(WinState.Zeroes);
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PlayHorizontalCrossesLine")]
        public void PlayHorizontalCrossesLine()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayHorizontalCrossesLine", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                GivenAnEmptyBoard();
                WhenIPlayCrossesOnFirstLine();
                ThenIShouldWinTheGame(WinState.Crosses);
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PlayDiagonalZeroesLine")]
        public void PlayDiagonalZeroesLine()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayDiagonalZeroesLine", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                GivenAnEmptyBoard();
                WhenIPlayZeroesOnBackslashDiagonal();
                ThenIShouldWinTheGame(WinState.Zeroes);
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion